// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["debian-openssl-1.1.x", "windows"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum USER_ROLE {
  CLIENT
  ADMINISTRATOR
}

enum EStatusOfRefill {
  SUCCESS
  FALSE
  DENIED
  REFUND
  IN_PROGRESS
}

enum EStatusOfProductInInventory {
  INVENTORY
  ON_SERVER
}

enum ETypeOfProduct {
  GAME_ITEM
  SERVICE
  SETS_OF_PRODUCTS
  HTTP_REQUEST
  CURRENCY
  CARDS
}

enum ETypeOfURL {
  SITE_SECTION
  CUSTOM_PAGE
  EXTERNAL_LINK
  DROPDOWN_LIST
}

enum EButtonColor {
  GREEN
  BLUE
}

model User {
  id Int @id @default(autoincrement())

  steamName     String    @db.LongText
  steamID       String    @unique
  email         String?   @unique
  steamAvatar   String    @db.LongText
  mainBalance   Int
  bonusBalance  Int       @default(0)
  firstDateAuth DateTime  @default(now())
  lvl           Int       @default(1)
  experience    Int       @default(0)
  sumOfDeposits Int       @default(0)
  sumOfRefunds  Int       @default(0)
  discordLink   String?   @db.LongText
  VKLink        String?   @db.LongText
  TGLink        String?   @db.LongText
  createdAt     DateTime  @default(now())
  lastActivity  DateTime?

  role              USER_ROLE     @default(CLIENT)
  Transaction       Transaction[]
  Purchase          Purchase[]
  TransfersSender   Transfers[]   @relation("sender")
  TransfersReceiver Transfers[]   @relation("receiver")
  Inventory         Inventory[]
  Tokens            Token[]
}

model Transaction {
  id        Int             @id @default(autoincrement())
  user      User?           @relation(fields: [userId], references: [id])
  userId    Int?
  method    String          @db.LongText
  amount    Int
  createdAt DateTime        @default(now())
  status    EStatusOfRefill @default(FALSE)
}

model Purchase {
  id               Int         @id @default(autoincrement())
  user             User?       @relation(fields: [userId], references: [id])
  userId           Int?
  amount           Int
  createdAt        DateTime    @default(now())
  lostMainBalance  Int
  lostBonusBalance Int
  refund           Boolean
  Inventory        Inventory[]
  product          Product     @relation(fields: [productId], references: [id])
  productId        Int
  dateOfPurchase   String?
}

model Transfers {
  id         Int      @id @default(autoincrement())
  sender     User     @relation("sender", fields: [senderId], references: [id])
  receiver   User     @relation("receiver", fields: [receiverId], references: [id])
  senderId   Int
  receiverId Int
  amount     Int
  createdAt  DateTime @default(now())
}

model Inventory {
  id                  Int                         @id @default(autoincrement())
  amount              Int
  status              EStatusOfProductInInventory @default(INVENTORY)
  dateOfReceive       DateTime?
  purchase            Purchase                    @relation(fields: [historyOfPurchaseId], references: [id])
  historyOfPurchaseId Int
  user                User                        @relation(fields: [userId], references: [id])
  userId              Int
  serverType          ServerType?                 @relation(fields: [serverTypeId], references: [id])
  serverTypeId        Int?
  server              Server?                     @relation(fields: [serverId], references: [id])
  serverId            Int?
  serverName          String?                     @db.LongText
  product             Product                     @relation(fields: [productId], references: [id])
  productId           Int
  createdAt           DateTime                    @default(now())

  isCanBeRefund Boolean @default(true)

  isPartOfPack Boolean?
  packId       Int?
}

model ServerType {
  id          Int         @id @default(autoincrement())
  name        String      @db.LongText
  description String      @db.LongText
  number      Int
  hidden      Boolean     @default(true)
  Inventory   Inventory[]
  Server      Server[]
  Product     Product[]
}

model Server {
  id           Int         @id @default(autoincrement())
  typeOfSever  ServerType  @relation(fields: [serverTypeId], references: [id])
  serverTypeId Int
  IP           String      @db.LongText
  port         String      @db.LongText
  apiKey       String      @db.LongText
  name         String      @default("SERVER")
  serverID     Int
  Inventory    Inventory[]
}

model Product {
  id             Int            @id @default(autoincrement())
  name_ru        String         @db.LongText
  name_en        String         @db.LongText
  nameID         String?
  description_ru String?        @db.LongText
  description_en String?        @db.LongText
  image          String?        @db.LongText
  type           ETypeOfProduct @default(GAME_ITEM)
  productContent Json?
  serverType     ServerType?    @relation(fields: [serverTypeId], references: [id])
  serverTypeId   Int?
  amount         Int            @default(1)
  isChangeAmount Boolean        @default(false)
  price          Int
  discount       Int?           @default(1)
  saleDiscount   Int?           @default(1)
  saleDeadline   DateTime?
  maxCountOfSale Int?
  hidden         Boolean        @default(true)
  number         Int?
  autoactivation Boolean        @default(false)

  isBackgroundColor Boolean @default(false) // есть ли бекграунд или он прозрачный
  blockSize         Int     @default(1)
  isBackgroundImage Boolean @default(false) // картинка на бекграунде или нет

  buttonColor   EButtonColor @default(BLUE)
  textButton    String?
  textButton_en String?
  iconButton    String?
  height        Int?

  Purchase  Purchase[]
  Inventory Inventory[]
}

model Promocodes {
  id                Int      @id @default(autoincrement())
  name              String   @db.LongText
  countOfActivation Int
  createdAt         DateTime @default(now())
  startDate         DateTime
  endDate           DateTime
  discountAmount    Int?
  depositBonus      Int?
  plusBonusBalance  Int?
  limitActivation   Int
  groupId           String   @default(uuid()) @db.LongText
  itemSet           String?  @db.LongText
}

model BaseSettings {
  id           Int     @id @default(autoincrement())
  header       String  @db.LongText
  saleMode     Boolean @default(false)
  startBalance Int
  mainPage     String  @db.LongText
  apiKey       String  @db.LongText
  IPWhiteList  String  @db.LongText
  panelURLs    Json?
}

model UrlSettings {
  id            Int        @id @default(autoincrement())
  icon          String?    @db.LongText
  text          String?    @db.LongText // заголовок страницы
  typeUrl       ETypeOfURL @default(CUSTOM_PAGE)
  url           String     @db.LongText //ссылка на эту стрницу
  hidden        Boolean    @default(true)
  sections      Json? // название секций и иконки к ним, html к секции
  isHaveSidebar Boolean? // есть или нет сайдбар на странице
}

model Token {
  id         Int     @id @default(autoincrement())
  token      String  @db.LongText
  User       User?   @relation(fields: [userId], references: [id])
  userId     Int
  deviceType String?
  deviceName String?
  clientIp   String?
  browser    String?
  os         String?
}

model Contacts {
  id   Int    @id @default(autoincrement())
  name String
  url  String
  icon String
}

model Visitors {
  id          Int      @id @default(autoincrement())
  ip          String
  sortDate    String
  sortedMonth String
  createdAt   DateTime @default(now())
}
