// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["debian-openssl-1.1.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum USER_ROLE {
  CLIENT
  ADMINISTRATOR
}

enum EStatusOfRefill {
  SUCCESS
  FALSE
  DENIED
}

enum EStatusOfProductInInventory {
  INVENTORY
  ON_SERVER
}

enum ETypeOfProduct {
  GAME_ITEM
  SERVICE
  SETS_OF_PRODUCTS
  HTTP_REQUEST
  CURRENCY
  CARDS
}

enum ETypeOfURL {
  SITE_SECTION
  CUSTOM_PAGE
  EXTERNAL_LINK
  DROPDOWN_LIST
}

model User {
  id Int @id @default(autoincrement())

  steamName     String    @db.LongText
  steamID       String    @unique
  email         String?   @unique
  steamAvatar   String    @db.LongText
  mainBalance   Int
  bonusBalance  Int       @default(0)
  firstDateAuth DateTime  @default(now())
  lvl           Int       @default(1)
  experience    Int       @default(0)
  sumOfDeposits Int       @default(0)
  sumOfRefunds  Int       @default(0)
  discordLink   String?   @db.LongText
  VKLink        String?   @db.LongText
  TGLink        String?   @db.LongText
  createdAt     DateTime  @default(now())
  lastActivity  DateTime?

  role              USER_ROLE     @default(CLIENT)
  Transaction       Transaction[]
  Purchase          Purchase[]
  TransfersSender   Transfers[]   @relation("sender")
  TransfersReceiver Transfers[]   @relation("receiver")
  Inventory         Inventory[]
  Tokens            Token[]
}

model Transaction {
  id String @id @default(uuid())

  user      User?           @relation(fields: [userId], references: [id])
  userId    Int?
  method    String          @db.LongText
  amount    Int
  createdAt DateTime        @default(now())
  status    EStatusOfRefill @default(FALSE)
}

model Purchase {
  id               String      @id @default(uuid())
  user             User?       @relation(fields: [userId], references: [id])
  userId           Int?
  amount           Int
  createdAt        DateTime    @default(now())
  lostMainBalance  Int
  lostBonusBalance Int
  refund           Boolean
  Inventory        Inventory[]
  product          Product     @relation(fields: [productId], references: [id])
  productId        String
}

model Transfers {
  id         Int      @id @default(autoincrement())
  sender     User     @relation("sender", fields: [senderId], references: [id])
  receiver   User     @relation("receiver", fields: [receiverId], references: [id])
  senderId   Int
  receiverId Int
  amount     Int
  createdAt  DateTime @default(now())
}

model Inventory {
  id                  String                      @id @default(uuid())
  amount              Int
  status              EStatusOfProductInInventory @default(INVENTORY)
  dateOfReceive       DateTime?
  purchase            Purchase                    @relation(fields: [historyOfPurchaseId], references: [id])
  historyOfPurchaseId String
  user                User                        @relation(fields: [userId], references: [id])
  userId              Int
  serverType          ServerType                  @relation(fields: [serverTypeId], references: [id])
  serverTypeId        String
  server              Server                      @relation(fields: [serverId], references: [id])
  serverId            String
  serverName          String?                     @db.LongText
  product             Product                     @relation(fields: [productId], references: [id])
  productId           String
}

model ServerType {
  id          String      @id @default(uuid())
  name        String      @db.LongText
  description String      @db.LongText
  number      Int
  hidden      Boolean     @default(false)
  Inventory   Inventory[]
  Server      Server[]
  Product     Product[]
}

model Server {
  id           String      @id @default(uuid())
  typeOfSever  ServerType  @relation(fields: [serverTypeId], references: [id])
  serverTypeId String
  IP           String      @db.LongText
  port         String      @db.LongText
  apiKey       String      @db.LongText
  name         String      @default("SERVER")
  Inventory    Inventory[]
}

model Product {
  id             String         @id @default(uuid())
  name           String         @db.LongText
  description    String?        @db.LongText
  image          String?        @db.LongText
  type           ETypeOfProduct @default(GAME_ITEM)
  productContent Json?
  serverType     ServerType?    @relation(fields: [serverTypeId], references: [id])
  serverTypeId   String?
  amount         Int            @default(1)
  isChangeAmount Boolean        @default(false)
  price          Int
  discount       Int?
  saleDiscount   Int?
  saleDeadline   DateTime?
  maxCountOfSale Int?
  hidden         Boolean        @default(false)
  number         Int?
  autoactivation Boolean        @default(false)

  isBackground      Boolean @default(false)
  previewImage      String?
  blockSize         Int     @default(1)
  label             Int     @default(1)
  isBackgroundImage Boolean @default(false)

  Purchase  Purchase[]
  Inventory Inventory[]
}

model Promocodes {
  id                Int      @id @default(autoincrement())
  name              String   @db.LongText
  countOfActivation Int
  createdAt         DateTime @default(now())
  startDate         DateTime
  endDate           DateTime
  discountAmount    Int?
  depositBonus      Int?
  plusBonusBalance  Int?
  limitActivation   Int
  groupId           String   @default(uuid()) @db.LongText
  itemSet           String?  @db.LongText
}

model baseSettings {
  id           String  @id @default(uuid())
  header       String  @db.LongText
  saleMode     Boolean @default(false)
  startBalance Int
  mainPage     String  @db.LongText
  apiKey       String  @db.LongText
  IPWhiteList  String  @db.LongText
  panelURLs    Json?
}

model urlSettings {
  id       String     @id @default(uuid())
  icon     String     @db.LongText
  text     String     @db.LongText
  typeUrl  ETypeOfURL
  url      String     @db.LongText
  hidden   Boolean    @default(false)
  name     String?    @db.LongText
  sections String?    @db.LongText
}

model Token {
  id     String @id @default(uuid())
  token  String @db.LongText
  User   User?  @relation(fields: [userId], references: [id])
  userId Int
}
