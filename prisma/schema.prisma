generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum USER_ROLE {
  CLIENT
  ADMINISTRATOR
}

enum EStatusOfRefill {
  SUCCESS
  FALSE
  DENIED
}

enum EStatusOfProductInInventory {
  INVENTORY
  ON_SERVER
}

enum ETypeOfProduct {
  GAME_ITEM
  SERVICE
  SETS_OF_PRODUCTS
  HTTP_REQUEST
  CURRENCY
  CARDS
}

model User {
  id String @id @default(uuid())

  steamName     String
  steamID       String
  email         String    @unique
  password      String
  steamAvatar   String //? фронт отдельно запрашивает ее или мы храним у себя?
  mainBalance   Int
  bonusBalance  Int
  firstDateAuth DateTime
  lvl           Int
  experience    Int
  sumOfDeposits Int
  sumOfRefunds  Int
  discordLink   String? //? как привязывать все это?
  VKLink        String?
  TGLink        String?
  createdAt     DateTime  @default(now())
  lastActivity  DateTime?

  role                       USER_ROLE            @default(CLIENT)
  HistoryOfMoney             HistoryOfMoney[]
  HistoryOfPurchase          HistoryOfPurchase[]
  HistoryOfTransfersSender   HistoryOfTransfers[] @relation("sender")
  HistoryOfTransfersReceiver HistoryOfTransfers[] @relation("receiver")
  Inventory                  Inventory[]
}

model HistoryOfMoney {
  id String @id @default(uuid())

  user      User?           @relation(fields: [userId], references: [id])
  userId    String?
  method    String
  amount    Int
  createdAt DateTime        @default(now()) //? нужен ли дефолт?
  status    EStatusOfRefill @default(FALSE)
}

model HistoryOfPurchase {
  id     String  @id @default(uuid())
  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  amount           Int
  createdAt        DateTime    @default(now()) //? нужен ли дефолт?
  lostMainBalance  Int
  lostBonusBalance Int
  refund           Boolean
  Inventory        Inventory[]
  product          Product     @relation(fields: [productId], references: [id])
  productId        String
}

model HistoryOfTransfers {
  id         String   @id @default(uuid())
  sender     User     @relation("sender", fields: [senderId], references: [id])
  receiver   User     @relation("receiver", fields: [receiverId], references: [id])
  senderId   String
  receiverId String
  amount     Int
  createdAt  DateTime @default(now()) //? нужен ли дефолт?
}

model Inventory {
  id                  String                      @id @default(uuid())
  purchase            HistoryOfPurchase           @relation(fields: [historyOfPurchaseId], references: [id])
  historyOfPurchaseId String
  user                User                        @relation(fields: [userId], references: [id])
  userId              String
  typeOfSever         TypeOfServer                @relation(fields: [typeOfServerId], references: [id])
  server              Server                      @relation(fields: [serverId], references: [id])
  amount              Int
  status              EStatusOfProductInInventory @default(INVENTORY)
  dateOfReceive       DateTime?
  serverName          String? //? нужно ли значение по дефолту?
  typeOfServerId      String
  serverId            String
  product             Product                     @relation(fields: [productId], references: [id])
  productId           String
}

model TypeOfServer {
  id          String      @id @default(uuid())
  name        String
  description String
  number      Int
  hidden      Boolean     @default(false)
  Inventory   Inventory[]
  Server      Server[]
  Product     Product[]
}

model Server {
  id             String       @id @default(uuid())
  typeOfSever    TypeOfServer @relation(fields: [typeOfServerId], references: [id])
  typeOfServerId String
  IP             String
  port           String
  apiKey         String
  Inventory      Inventory[]
}

model Product {
  id                String              @id @default(uuid())
  name              String
  description       String
  image             String
  type              ETypeOfProduct
  productContent    Json
  typeOfServer      TypeOfServer        @relation(fields: [typeOfServerId], references: [id])
  typeOfServerId    String
  amount            Int
  isChangeAmount    Boolean             @default(false)
  price             Int
  discount          Int?
  saleDiscount      Int?
  saleDelaySeconds  Int?
  saleDeadline      DateTime?
  maxCountOfSale    Int?
  hidden            Boolean             @default(false)
  number            Int?
  autoactivation    Boolean             @default(false)
  HistoryOfPurchase HistoryOfPurchase[]
  Inventory         Inventory[]
}

model Promocodes {
  id                String   @id @default(uuid())
  name              String
  countOfActivation Int
  createdAt         DateTime @default(now())
  startDate         DateTime
  endDate           DateTime
  discountAmount    Int?
  depositBonus      Int?
  plusBonusBalance  Int?
  limitActivation   Int
  groupId           String   @default(uuid())
  itemSet           String[]
}
